ws = _{" "*}
newln = _{("\r\n" | "\n") ~ ws}
special_chars = _{"*"| "?"| "#"| "@"| "!"}
char = _{ASCII_ALPHANUMERIC | special_chars }


INT = @{("-"){0,1} ~ ASCII_DIGIT+}
FLOAT = @{ASCII_DIGIT+ ~ ".."* }
STRLIT = @{( "\'" ~ws~   (char | " "+)*   ~ws~ "\'" )}
ID = @{"?"{0,1} ~ws~ char+}
BOOL = @{("true" | "false")}
conditional_oper = {"==" | ">" | "<"}
D_TYPE = _{ BOOL | INT | FLOAT | STRLIT | ID  }


Std_fn = {"PRNT"}
Operations = { "ADD" | "SUB" | "MUL" | "DIV" }
MemType = { "int" | "float" | "str" | "bool" }
MemInst = { "MOV" | "DEL" }
Comment = {"crap:-" ~ws~ (char | " "+)*}


var_make = { ws ~ MemType ~ws~ ID ~ws~ (D_TYPE) ~ws}
vsec = {"_VARS:" ~ws~ INT ~newln* ~ (var_make ~ newln*)* ~ws~ "EOS!"}


stdfn_expr = {Std_fn ~ (ws~ (math_expr | conditional_expr | D_TYPE ) )+ ~ws}
math_expr = {Operations ~ (ws~ D_TYPE)+ ~ws}
mem_inst_expr = {MemInst ~ws~ ID ~ws~ (math_expr | stdfn_expr | D_TYPE) ~ws}
conditional_expr = {"[" ~ws~ INT ~ws~ conditional_oper ~ws~ D_TYPE ~ws~ "]" ~ws}
jump_expr = {"JUMPIF" ~ws~ INT ~ws~ (BOOL | conditional_expr) ~ws}

parent_expr = _{ws~ (stdfn_expr | mem_inst_expr | math_expr | jump_expr | conditional_expr | Comment) ~ws~ newln* }

msec = {"_MAIN:" ~newln*~ parent_expr* ~ "_END:"}

file = { SOI ~ vsec ~newln*~ msec  ~ws~ EOI }