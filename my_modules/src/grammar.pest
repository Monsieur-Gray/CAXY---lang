ws = _{" "*}
newln = _{("\r\n" | "\n") ~ ws}
special_chars = _{"_"}
escape_chars = _{"\t" | "\n"}
extra_special_chars = _{"-" | "+" | "/" | "\\" | "=" | ":" |  "(" | ")" | "," | "@"}
char = _{ASCII_ALPHANUMERIC | special_chars }
decimal = _{"."}

INT = @{("-" | "+"){0,1} ~ ASCII_DIGIT+}
FLOAT = @{ASCII_DIGIT+ ~ws~ decimal ~ws~ ASCII_DIGIT+}
STRLIT = @{( "\'" ~ws~   (char | " "| extra_special_chars | escape_chars)*   ~ws~ "\'" )}
ID = @{"?"{0,1} ~ws~ char+}
BOOL = @{("true" | "false")}
REGISTER = @{"$" ~ ASCII_DIGIT}
D_TYPE = _{ BOOL | REGISTER | FLOAT | INT | STRLIT | ID  }

Std_fn = {"PRNT_COOL" |"PRNT" | "SINPUT" }
Operations = { "ADD" | "SUB" | "MUL" | "DIV" }
MemType = { "int" | "float" | "str" | "bool" }
MemInst = {"MOV" | "DEL"}
Comment = {"crap->" ~ws~ (char | " "| extra_special_chars)* }
conditional_oper = {"==" | "!=" | ">" | "<" }
logical_oper = {"&&" | "||" }


var_make = { ws ~ MemType ~ws~ ID ~ws~ (D_TYPE) ~ws}
local_var_make = { "@" ~ MemType ~ws~ ID ~ws~ D_TYPE ~ws}

vsec = {"_VARS:" ~ws~ INT ~newln* ~ (var_make ~ newln*)* ~ws~ "EOS!"}


stdfn_expr = {Std_fn ~ (ws~ (math_expr | logical_expr | D_TYPE ) )+ ~ws}
math_expr = {Operations ~ (ws~ D_TYPE)+ ~ws}
mem_inst_expr = {MemInst ~ws~ (ID | REGISTER) ~ws~ (math_expr | stdfn_expr | D_TYPE){0,1} ~ws}


condition = {D_TYPE ~ws~ conditional_oper ~ws~ D_TYPE }
logical_expr = {"[" ~ws~ (condition | logical_expr) ~ws~ (ws~ logical_oper ~ws~ (condition | logical_expr)){0,1} ~ws~ "]" ~ws}

jumpif_expr = {"JUMPIF" ~ws~ INT ~ws~ (BOOL | logical_expr) ~ws}

if_expr = {"IF" ~ws~ (BOOL | ID | logical_expr) ~ws~ parent_expr ~ws}
elif_expr = {"ELIF" ~ws~ (BOOL | ID | logical_expr) ~ws~ parent_expr ~ws}
else_expr = {"ELSE" ~ws~ parent_expr ~ws}

if_else_expr = {if_expr  ~newln*~ws~ else_expr}
if_elif_expr = {if_expr ~ (newln*~ws~ elif_expr)+ ~newln*~ws~ else_expr }


parent_expr = _{ stdfn_expr | mem_inst_expr | math_expr | jumpif_expr | logical_expr | if_elif_expr | if_else_expr | if_expr | Comment }

inner_vsec = { (ws~ local_var_make ~ws~ newln*)* }
inner_msec = { (ws~ (parent_expr | InnerScope) ~ws~ newln*)+ }

InnerScope = { "{" ~newln*~ inner_vsec ~ws~ inner_msec ~ws~ "}" ~ws}

msec = {"_MAIN:" ~newln*~ (ws~ (parent_expr | InnerScope) ~ws~ newln*)* ~ws~ "_END:"}

file = { SOI ~ vsec ~newln*~ msec ~ws~ EOI }